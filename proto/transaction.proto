// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

//import "proto/logic.proto";
import "proto/options.proto";
import "proto/query.proto";

package typedb.protocol;

message Transaction {

    message Client {
        bytes connection_id = 1;
        repeated Req reqs = 2;
    }

    message Server {
        oneof server {
            Res res = 1;
            ResPart res_part = 2;
        }
    }

    message Req {
        bytes req_id = 1;
        map<string, string> metadata = 2;
        oneof req {
            Open.Req open_req = 3;
            Query.Req query_req = 4;
            Stream.Req stream_req = 5;
            Commit.Req commit_req = 6;
            Rollback.Req rollback_req = 7;
            Close.Req close_req = 8;
        }
    }

    message Res {
        bytes req_id = 1;
        oneof res {
            Open.Res open_res = 2;
            Query.Res query_res = 3;
            Commit.Res commit_res = 5;
            Rollback.Res rollback_res = 6;
        }
    }

    message ResPart {
        bytes req_id = 1;
        Query.ResPart res = 2;
        Stream.ResPart stream_res = 4;
    }

    enum Type {
        READ = 0;
        WRITE = 1;
        SCHEMA = 2;
    }

    message Open {
        message Req {
            string database = 1;
            Type type = 2;
            Options options = 3;
            uint64 network_latency_millis = 4;
        }
        message Res {}
    }

    message Commit {
        message Req {}
        message Res {}
    }

    message Rollback {
        message Req {}
        message Res {}
    }

    message Close {
        message Req {}
        message Res {}
    }

    message GetSchemaExceptions {
        message Req {}
        message Res {
            repeated SchemaException exceptions = 1;
        }
    }

    message SchemaException {
        string code = 1;
        string message = 2;
    }

    message Stream {
        message Req {}

        message ResPart {
            State state = 1;

            enum State {
                CONTINUE = 0;
                DONE = 1;
            }
        }
    }
}
