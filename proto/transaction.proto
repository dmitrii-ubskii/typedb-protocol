// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

option java_package = "com.vaticle.typedb.protocol";
option java_outer_classname = "TransactionProto";

import "proto/concept.proto";
import "proto/logic.proto";
import "proto/options.proto";
import "proto/query.proto";

package typedb.protocol;

message Transaction {

    message Client {
        repeated Req reqs = 1;
    }

    message Server {
        oneof server {
            Res res = 2;
            ResPart res_part = 3;
        }
    }

    message Req {
        bytes req_id = 1;
        map<string, string> metadata = 2;
        oneof req {
            Open.Req open_req = 3;
            Stream.Req stream_req = 4;
            Commit.Req commit_req = 5;
            Rollback.Req rollback_req = 6;
            QueryManager.Req query_manager_req = 7;
            ConceptManager.Req concept_manager_req = 8;
            LogicManager.Req logic_manager_req = 9;
            Rule.Req rule_req = 10;
            typedb.protocol.Type.Req type_req = 11;
            Thing.Req thing_req = 12;
        }
    }

    message Res {
        bytes req_id = 1;
        oneof res {
            Open.Res open_res = 2;
            Commit.Res commit_res = 3;
            Rollback.Res rollback_res = 4;
            QueryManager.Res query_manager_res = 5;
            ConceptManager.Res concept_manager_res = 6;
            LogicManager.Res logic_manager_res = 7;
            Rule.Res rule_res = 8;
            typedb.protocol.Type.Res type_res = 9;
            Thing.Res thing_res = 10;
        }
    }

    message ResPart {
        bytes req_id = 1;
        oneof res {
            Stream.ResPart stream_res_part = 2;
            QueryManager.ResPart query_manager_res_part = 3;
            LogicManager.ResPart logic_manager_res_part = 4;
            typedb.protocol.Type.ResPart type_res_part = 5;
            Thing.ResPart thing_res_part = 6;
        }
    }

    enum Type {
        READ = 0;
        WRITE = 1;
    }

    message Open {
        message Req {
            bytes session_id = 1;
            Type type = 2;
            Options options = 3;
            int32 network_latency_millis = 4;
        }
        message Res {}
    }

    message Stream {
        enum State {
            CONTINUE = 0;
            DONE = 1;
        }
        message Req {}
        message ResPart {
            State state = 1;
        }
    }

    message Commit {
        message Req {}
        message Res {}
    }

    message Rollback {
        message Req {}
        message Res {}
    }
}
